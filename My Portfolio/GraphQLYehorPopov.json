{
	"info": {
		"_postman_id": "2f332904-ac5d-4ba3-9a58-ffd78bc6cd85",
		"name": "GraphQL Practice Yehor Popov Hillel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31974213"
	},
	"item": [
		{
			"name": "get all cities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"let citiesArray = responseData.data.getAllCities;",
							"",
							"if (citiesArray.length >= 4) {",
							"    ",
							"    function shuffleArray(array) {",
							"        array.sort(() => Math.random() - 0.5);",
							"        return array;",
							"    }",
							"",
							"    let shuffledCities = shuffleArray(citiesArray);",
							"    let randomCities = shuffledCities.slice(0, 4);",
							"    ",
							"    // Преобразуем строки в числа",
							"    let randomIds = randomCities.map(city => Number(city.id)); // Используем Number для преобразования",
							"    pm.collectionVariables.set('randomIdsArray', JSON.stringify(randomIds));",
							"}",
							"",
							"",
							"if (citiesArray.length > 0) {",
							"    ",
							"    let totalSquare = citiesArray.reduce((sum, city) => sum + city.square, 0);",
							"    let averageSquare = totalSquare / citiesArray.length;",
							"    pm.collectionVariables.set('averageSquare', averageSquare);",
							"}",
							"",
							"let randomIdsArray = JSON.parse(pm.collectionVariables.get('randomIdsArray'));",
							"",
							"if (randomIdsArray && randomIdsArray.length > 0) {",
							"    let maxId = Math.max(...randomIdsArray); ",
							"    let minId = Math.min(...randomIdsArray); ",
							"    ",
							"    pm.collectionVariables.set('maxId', maxId); ",
							"    pm.collectionVariables.set('minId', minId); ",
							"}",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query{\n    getAllCities{\n        id\n        name\n        square\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Description cities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Description($ids: [ID!]!){\n    getCitiesByIds(in: $ids){\n        ... on City{\n            description\n        }\n    }\n}",
						"variables": "{\n  \"ids\": {{randomIdsArray}}\n}\n"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "cities in the range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has content type of application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($minId: Int!, $maxId: Int!){\n  getCityByRangeId(filter:{minId:$minId, maxId:$maxId}){\n    id\n    name\n    square\n  }\n}",
						"variables": "{\n    \"minId\": {{minId}},\n    \"maxId\": {{maxId}}\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "create city",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let citiesArray = JSON.parse(pm.collectionVariables.get(\"randomCity\"));",
							"",
							"function getRandomElement(array) {",
							"    return array[Math.floor(Math.random() * array.length)];",
							"}",
							"",
							"let randomCity = getRandomElement(citiesArray);",
							"pm.collectionVariables.set(\"randomCityName\", randomCity);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation addCity($name: String!, $square: Float!, $description: String!) {\n  addCity(name: $name, square: $square, description: $description) {\n    id\n    name\n    square\n  }\n}",
						"variables": "{\n  \"name\": \"{{randomCityName}}\",\n  \"square\": {{averageSquare}},\n  \"description\": \"New city description\"\n}"
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"",
					"const randomCity = [\"Прага\", \"Малиновка\", \"Чугуев\", \"Гданьск\", \"Лодзь\",];",
					"pm.collectionVariables.set(\"randomCity\", JSON.stringify(randomCity));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomIdsArray",
			"value": ""
		},
		{
			"key": "averageSquare",
			"value": ""
		},
		{
			"key": "randomIDs",
			"value": ""
		},
		{
			"key": "maxId",
			"value": ""
		},
		{
			"key": "minId",
			"value": ""
		},
		{
			"key": "randomCity",
			"value": ""
		},
		{
			"key": "randomCityName",
			"value": ""
		},
		{
			"key": "url",
			"value": "https://graphql-ukrainian-cities.hillel.it/graphql",
			"type": "string"
		}
	]
}